


# addons:

#   #linux
#   apt:
#     update: true
#     packages:
#       - libgcc1
#       - libgtk-3-dev
#       - desktop-file-utils
#       - p7zip-full
#       - build-essential
#       - snapd

#   #osx
#   homebrew:
#     update: true
#     packages:
#       - p7zip
#       - gtk+3

# language: D

# matrix:
#   include:
#     - d:
#       - dmd
#       - gdc
#       - ldc
#     - name: "Linux CLI"
#       dist: xenial
#       apt:
#         update: true
#         packages:
#           - libgcc1
#           - p7zip-full
#           - build-essential
          
#     - name: "Linux GTK"
#       language: D
#       d:
#         - dmd
#       dist: xenial
#       apt:
#         update: true
#         packages:
#           - libgcc1
#           - libgtk-3-dev
#           - desktop-file-utils
#           - p7zip-full
#           - build-essential

# language: d

# d:
# - dmd

# os:
# - linux
# # - windows
# - osx



# matrix:
#   exclude:
#   - d: 2.0.0
#     gemfile: Gemfile

env:
  - DMD_VERSION=2.087.1

jobs:
  fast_finish: true
  include:

    - stage: Unittest
      os: linux
      name: CLI Unittest
      language: bash
      install:
        - curl https://dlang.org/install.sh | bash -s
        - source ~/dlang/dmd-$DMD_VERSION/activate
      script:
        - dub build -c CLI -b unittest

    - 
      os: windows
      language: shell
      name: CLI Unittest
      powershell:
        - Invoke-WebRequest -Uri http://downloads.dlang.org/releases/2.x/$(DMD_VERSION)/dmd.$(DMD_VERSION).windows.zip -OutFile dmd2.zip
        - Expand-Archive dmd2.zip -DestinationPath .
      script:
        - dmd2/windows/bin/dub.exe build -c CLI -b unittest

    - 
      # os: osx
      # name: CLI Unittest
      # language: bash
      # install:
      #   - curl https://dlang.org/install.sh | bash -s
      #   - source ~/dlang/dmd-$DMD_VERSION/activate
      # script:
      #   - dub build -c CLI -b unittest

    - 
      os: linux
      name: GTK Unittest
      language: bash
      install: 
        - sudo apt update
        - sudo apt install -y libgtk-3-dev
        - curl https://dlang.org/install.sh | bash -s
        - source ~/dlang/dmd-$DMD_VERSION/activate
      script:
        - dub build -c GTK -b unittest

    # - 
    #   os: osx
    #   name: GTK Unittest
    #   language: bash
    #   install: 
    #     - brew install gtk+3
    #     - curl https://dlang.org/install.sh | bash -s
    #     - source ~/dlang/dmd-$DMD_VERSION/activate
    #   script:
    #     - dub build -c GTK -b unittest

    - stage: Build
      os: linux
      name: CLI Release
      language: bash
      install:
        - curl https://dlang.org/install.sh | bash -s
        - source ~/dlang/dmd-$DMD_VERSION/activate
      script:
        - dub build -c CLI -b release

    # - 
    #   os: osx
    #   name: CLI Release
    #   language: bash
    #   install:
    #     - curl https://dlang.org/install.sh | bash -s
    #     - source ~/dlang/dmd-$DMD_VERSION/activate
    #   script:
    #     - dub build -c CLI -b release

    - 
      os: linux
      name: GTK Release
      language: bash
      install: 
        - sudo apt update
        - sudo apt install -y libgtk-3-dev
        - curl https://dlang.org/install.sh | bash -s
        - source ~/dlang/dmd-$DMD_VERSION/activate
      script:
        - dub build -c GTK -b release

    # - 
    #   os: osx
    #   name: GTK Release
    #   language: bash
    #   install: 
    #     - brew install gtk+3
    #     - curl https://dlang.org/install.sh | bash -s
    #     - source ~/dlang/dmd-$DMD_VERSION/activate
    #   script:
    #     - dub build -c GTK -b release
    



    # - stage: Test
    #   name: CLI Test
    #   script: dub build -c CLI -b unittest
    #   os: windows
      

#     - 
#       name: GTK Test
#       script: dub build -c GTK -b unittest

#     - stage: Build
#       name: CLI Debug
#       script: dub build -c CLI

#     - 
#       name: CLI Release
#       script: dub build -c CLI -b release

#     - 
#       name: GTK Debug
#       sudo: required
#       install: sudo apt install -y libgtk-3-dev
#       script: dub build -c GTK

#     - 
#       name: GTK Release
#       sudo: required
#       install: sudo apt install -y libgtk-3-dev
#       script: dub build -c GTK -b release

    # - stage: Test Binary

          # - stage: Deploy
          #   script: ./deploy

    # - name: "Python 3.7.2 on macOS"
    #   os: osx
    #   osx_image: xcode10.2  # Python 3.7.2 running on macOS 10.14.3
    #   language: shell       # 'language: python' is an error on Travis CI macOS
    #   # python: 3.7         # 'python:' is ignored on Travis CI macOS
    #   before_install: python3 --version ; pip3 --version ; sw_vers
    #     before_cache:
    #   - brew cleanup
    # # Credit https://discourse.brew.sh/t/best-practice-for-homebrew-on-travis-brew-update-is-5min-to-build-time/5215/9
    # # Cache only .git files under "/usr/local/Homebrew" so "brew update" does not take 5min every build
    #   - find /usr/local/Homebrew \! -regex ".+\.git.+" -delete
        # cache:
        #   directories:
        #     - $HOME/Library/Caches/Homebrew
        #     - /usr/local/Homebrew

    # - name: "Windows"
    #   os: windows           # Windows 10.0.17134 N/A Build 17134
    #   language: shell       # 'language: python' is an error on Travis CI Windows
      # python: 3.7         # 'python:' is ignored on Travis CI Windows
      # before_install:
      #   - choco install python  # this install takes at least 1 min 30 sec
      #   - python -m pip install --upgrade pip
      # env: PATH=/c/d:/c/d/Scripts:$PATH






  ## linux
  # - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo snap install ldc2 --classic --channel=edge; fi
  # - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo snap install dmd --classic; fi
  # - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo snap install dub --classic; fi

before_deploy:
 - git config --local user.name "Federico Santamorena"
 - git config --local user.email "federico@santamorena.me"
 - export DRILL_VERSION=$(python -c "import sys, json; f = open('dub.json'); print(json.load(f)['version']); f.close()") 
 - ls -lh Output

deploy:
  # - provider: releases
  #   skip_cleanup: true
  #   draft: false
  #   prerelease: true
  #   name: Continuous Integration
  #   tag_name: ContinuousIntegration
  #   overwrite: true
  #   body: "Build #$TRAVIS_BUILD_NUMBER $TRAVIS_BUILD_WEB_URL"
  #   file_glob: true
  #   api_key:
  #     secure: $GITHUB_TOKEN
  #   file: 
  #     - Output/*.*
  #   on:
  #     repo: yatima1460/Drill

  - provider: releases
    skip_cleanup: true
    draft: false
    prerelease: false
    name: $DRILL_VERSION
    body: $DRILL_VERSION
    tag_name: $DRILL_VERSION
    file_glob: true
    api_key:
      secure: $GITHUB_TOKEN
    file: 
      - Output/*.*
    on:
      repo: yatima1460/Drill
      tags: true
      condition: $TRAVIS_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+$

notifications:
  email:
    on_success: never
    on_failure: always

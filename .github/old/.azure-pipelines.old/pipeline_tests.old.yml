


variables:
  dmd_version: 2.087.1


jobs:
- job: Linux_CLI_Unittest
  dependsOn: []
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - template: linux_install_dub.yml
    displayName: 'Install DMD'
  - bash: 'dub build -c CLI -b unittest --arch=x86_64'
    displayName: "CLI Unittest"

- job: Windows_CLI_Unittest
  dependsOn: []
  pool:
    name: Hosted VS2017
  steps:
  - powershell: |
      Invoke-WebRequest -Uri http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).windows.zip -OutFile dmd2.zip
      Expand-Archive dmd2.zip -DestinationPath .
  - script: '%cd%/dmd2/windows/bin/dmd.exe --version'
  - script: '%cd%/dmd2/windows/bin/dub.exe --version'
  - script: '%cd%/dmd2/windows/bin/dub.exe build -c CLI -b unittest --arch=x86_64'


- job: Windows_GTK_Unittest
  dependsOn: []
  pool:
    name: Hosted VS2017
  steps:
  - powershell: |
      Invoke-WebRequest -Uri http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).windows.zip -OutFile dmd2.zip
      Expand-Archive dmd2.zip -DestinationPath .
  - powershell: |
      Invoke-WebRequest -Uri https://github.com/yatima1460/GTK3-Windows/releases/download/20190809.4/GTK_x86_64_VS2019.zip -OutFile GTK_x86_64_VS2019.zip
      Expand-Archive GTK_x86_64_VS2019.zip -DestinationPath .
  - script: '%cd%/dmd2/windows/bin/dub.exe build -c GTK -b unittest --arch=x86_64'

- job: OSX_CLI_Unittest
  dependsOn: []
  pool:
    name: Hosted macOS
  steps:
  - bash: 'brew install gpgme'
  - bash: 'curl -fsS https://dlang.org/install.sh | bash -s dmd'
  - bash: 'source ~/dlang/dmd-$(dmd_version)/activate && dub build -c CLI -b unittest --arch=x86_64'

- job: Linux_GTK_Unittest
  dependsOn: []
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - bash: |
      wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
      sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
      dmd --version
      dub --version
    displayName: 'Install DMD'
  - bash: 'sudo apt install -y libgtk-3-dev'
  - bash: 'dub build -c GTK -b unittest --arch=x86_64'
    displayName: 'Unittest GTK'

- job: OSX_GTK_Unittest
  dependsOn: []
  pool:
    name: Hosted macOS
  steps:
  - bash: 'brew install gpgme'
  - bash: 'curl -fsS https://dlang.org/install.sh | bash -s dmd'
  - bash: 'brew install gtk+3'
  - bash: 'brew install glib'
  - bash: 'brew install gobject-introspection'
  - bash: 'source ~/dlang/dmd-$(dmd_version)/activate && dub build -c GTK -b unittest --arch=x86_64'
    displayName: 'Unittest GTK'

- job: Linux_CLI_Release
  dependsOn: []
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - bash: |
      wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
      sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
      dmd --version
      dub --version
    displayName: 'Install DMD'
  - bash: 'dub build -c CLI -b release --arch=x86_64'
    displayName: "CLI Release"
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Build/Drill-CLI-linux-x86_64-release'
      artifact: 'Drill-CLI-linux-x86_64-release' 

- job: Windows_CLI_Release
  dependsOn: []
  pool:
    name: Hosted VS2017
  steps:
  - powershell: |
      Invoke-WebRequest -Uri http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).windows.zip -OutFile dmd2.zip
      Expand-Archive dmd2.zip -DestinationPath .
  - script: '%cd%/dmd2/windows/bin/dmd.exe --version'
  - script: '%cd%/dmd2/windows/bin/dub.exe --version'
  - script: '%cd%/dmd2/windows/bin/dub.exe build -c CLI -b release --arch=x86_64'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Build/Drill-CLI-windows-x86_64-release'
      artifact: 'Drill-CLI-windows-x86_64-release' 

- job: OSX_CLI_Release
  dependsOn: []
  pool:
    name: Hosted macOS
  steps:
  - bash: 'brew install gpgme'
  - bash: 'curl -fsS https://dlang.org/install.sh | bash -s dmd'
  - bash: 'source ~/dlang/dmd-$(dmd_version)/activate && dub build -c CLI -b release --arch=x86_64'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Build/Drill-CLI-osx-x86_64-release'
      artifact: 'Drill-CLI-osx-x86_64-release' 

- job: Linux_GTK_Release
  dependsOn: []
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - bash: |
      wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
      sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
      dmd --version
      dub --version
    displayName: 'Install DMD'
  - bash: 'sudo apt install -y libgtk-3-dev'
  - bash: 'dub build -c GTK -b release --arch=x86_64'
    displayName: "GTK Release"
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Build/Drill-GTK-linux-x86_64-release'
      artifact: 'Drill-GTK-linux-x86_64-release'




- job: Windows_GTK_Release
  dependsOn: []
  pool:
    name: Hosted VS2017
  steps:
  - powershell: |
      Invoke-WebRequest -Uri http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).windows.zip -OutFile dmd2.zip
      Expand-Archive dmd2.zip -DestinationPath .
  - powershell: |
      Invoke-WebRequest -Uri https://github.com/yatima1460/GTK3-Windows/releases/download/20190809.4/GTK_x86_64_VS2019.zip -OutFile GTK_x86_64_VS2019.zip
      Expand-Archive GTK_x86_64_VS2019.zip -DestinationPath .
  - script: '%cd%/dmd2/windows/bin/dub.exe build -c GTK -b release --arch=x86_64'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Build/Drill-GTK-windows-x86_64-release'
      artifact: 'Drill-GTK-windows-x86_64-release' 

- job: OSX_GTK_Release
  dependsOn: []
  pool:
    name: Hosted macOS
  steps:
  - bash: 'brew install gpgme'
  - bash: 'curl -fsS https://dlang.org/install.sh | bash -s dmd'
  - bash: 'brew install gtk+3'
  - bash: 'brew install glib'
  - bash: 'brew install gobject-introspection'
  - bash: 'source ~/dlang/dmd-$(dmd_version)/activate && dub build -c GTK -b release --arch=x86_64'
    displayName: 'Unittest GTK'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Build/Drill-GTK-osx-x86_64-release'
      artifact: 'Drill-GTK-osx-x86_64-release' 

- job: Linux_CLI_Release_Zip
  dependsOn: [Linux_CLI_Release]
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-CLI-linux-x86_64-release'
      targetPath: '$(Pipeline.Workspace)/Drill-CLI-linux-x86_64-release'
  - bash: 7z a -tzip Drill-CLI-linux-x86_64-release.zip $(Pipeline.Workspace)/Drill-CLI-linux-x86_64-release/*
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Drill-CLI-linux-x86_64-release.zip'
      artifact: 'Drill-CLI-linux-x86_64-release.zip'

- job: Windows_CLI_Release_Zip
  dependsOn: [Windows_CLI_Release]
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-CLI-windows-x86_64-release'
      targetPath: '$(Pipeline.Workspace)/Drill-CLI-windows-x86_64-release'
  - bash: 7z a -tzip Drill-CLI-windows-x86_64-release.zip $(Pipeline.Workspace)/Drill-CLI-windows-x86_64-release/*
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Drill-CLI-windows-x86_64-release.zip'
      artifact: 'Drill-CLI-windows-x86_64-release.zip'

- job: Windows_GTK_Release_Zip
  dependsOn: [Windows_GTK_Release]
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-GTK-windows-x86_64-release'
      targetPath: '$(Pipeline.Workspace)/Drill-GTK-windows-x86_64-release'
  - bash: 7z a -tzip Drill-GTK-windows-x86_64-release.zip $(Pipeline.Workspace)/Drill-GTK-windows-x86_64-release/*
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Drill-GTK-windows-x86_64-release.zip'
      artifact: 'Drill-GTK-windows-x86_64-release.zip'



- job: OSX_CLI_Release_Zip
  dependsOn: [OSX_CLI_Release]
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-CLI-osx-x86_64-release'
      targetPath: '$(Pipeline.Workspace)/Drill-CLI-osx-x86_64-release'
  - bash: 7z a -tzip Drill-CLI-osx-x86_64-release.zip $(Pipeline.Workspace)/Drill-CLI-osx-x86_64-release/*
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Drill-CLI-osx-x86_64-release.zip'
      artifact: 'Drill-CLI-osx-x86_64-release.zip'

- job: Linux_GTK_Release_Zip
  dependsOn: [Linux_GTK_Release]
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-GTK-linux-x86_64-release'
      targetPath: '$(Pipeline.Workspace)/Drill-GTK-linux-x86_64-release'
  - bash: 7z a -tzip Drill-GTK-linux-x86_64-release.zip $(Pipeline.Workspace)/Drill-GTK-linux-x86_64-release/*
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Drill-GTK-linux-x86_64-release.zip'
      artifact: 'Drill-GTK-linux-x86_64-release.zip'


- job: Linux_GTK_Release_AppImage
  dependsOn: [Linux_GTK_Release]
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-GTK-linux-x86_64-release'
      targetPath: '$(System.DefaultWorkingDirectory)/Drill-GTK-linux-x86_64-release'
  - bash: sudo apt install -y appstream
  - bash: export PIPELINE_WORKSPACE=$(System.DefaultWorkingDirectory) && bash .azure-pipelines/create_appimage.sh
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/Drill-release-x86_64.AppImage'
      artifact: 'Drill-release-x86_64.AppImage' 

- job: Linux_GTK_Release_AppImage_Test
  dependsOn: [Linux_GTK_Release_AppImage]
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-release-x86_64.AppImage'
      targetPath: '$(System.DefaultWorkingDirectory)'
  - bash: chmod +x $(System.DefaultWorkingDirectory)/Drill-release-x86_64.AppImage
  - bash: $(System.DefaultWorkingDirectory)/Drill-release-x86_64.AppImage --appimage-extract
      

- job: OSX_GTK_Release_Zip
  dependsOn: [OSX_GTK_Release]
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-GTK-osx-x86_64-release'
      targetPath: '$(Pipeline.Workspace)/Drill-GTK-osx-x86_64-release'
  - bash: 7z a -tzip Drill-GTK-osx-x86_64-release.zip $(Pipeline.Workspace)/Drill-GTK-osx-x86_64-release/*
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'Drill-GTK-osx-x86_64-release.zip'
      artifact: 'Drill-GTK-osx-x86_64-release.zip'


# - job: Linux_GTK_Release_AppImage_Test
#   dependsOn: [Linux_GTK_Release_AppImage]
#   pool:
#     name: Hosted Ubuntu 1604
#   steps:
#   - checkout: none
#   - task: DownloadPipelineArtifact@2
#     inputs:
#       buildType: 'current'
#       artifactName: 'Drill-GTK-linux-x86_64-release-'
#       targetPath: '$(Pipeline.Workspace)/Drill-GTK-linux-x86_64-release'
#   - bash: 7z a -tzip Drill-GTK-linux-x86_64-release.zip $(Pipeline.Workspace)/Drill-GTK-linux-x86_64-release/*
#   - task: PublishPipelineArtifact@1
#     inputs:
#       targetPath: 'Drill-GTK-linux-x86_64-release.zip'
#       artifact: 'Drill-GTK-linux-x86_64-release.zip'
# - job: Linux_CLI_Stress_Test
#   dependsOn: [Linux_CLI_Release]
#   pool:
#     name: Hosted Ubuntu 1604
#   steps:
#   - checkout: none
#   - task: DownloadPipelineArtifact@2
#     inputs:
#       buildType: 'current'
#       artifactName: 'Drill-CLI-linux-x86_64-release'
#       targetPath: '$(Pipeline.Workspace)/Drill-CLI-linux-x86_64-release'
#   # Use the long path so we test if relative CWD works too in Drill
#   - bash: chmod +x $(Pipeline.Workspace)/Drill-CLI-linux-x86_64-release/drill-search-cli
#   - bash: $(Pipeline.Workspace)/Drill-CLI-linux-x86_64-release/drill-search-cli .

# - job: OSX_CLI_Stress_Test
#   dependsOn: [OSX_CLI_Release]
#   pool:
#     name: Hosted macOS
#   steps:
#   - checkout: none
#   - task: DownloadPipelineArtifact@2
#     inputs:
#       buildType: 'current'
#       artifactName: 'Drill-CLI-osx-x86_64-release'
#       targetPath: '$(Pipeline.Workspace)/Drill-CLI-osx-x86_64-release'
#   - bash: chmod +x $(Pipeline.Workspace)/Drill-CLI-osx-x86_64-release/drill-search-cli
#   - bash: $(Pipeline.Workspace)/Drill-CLI-osx-x86_64-release/drill-search-cli .

# - job: Windows_CLI_Stress_Test
#   dependsOn: [Windows_CLI_Release]
#   pool:
#     name: Hosted VS2017
#   steps:
#   - checkout: none
#   - task: DownloadPipelineArtifact@2
#     inputs:
#       buildType: 'current'
#       artifactName: 'Drill-CLI-windows-x86_64-release'
#       targetPath: '$(Pipeline.Workspace)/Drill-CLI-windows-x86_64-release'
#   - script: $(Pipeline.Workspace)/Drill-CLI-windows-x86_64-release/drill-search-cli.exe .



# Seach files by name tests with cutoff time

- job: Linux_CLI_Name_Test
  timeoutInMinutes: 1
  dependsOn: [Linux_CLI_Release]
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-CLI-linux-x86_64-release'
      targetPath: '$(System.DefaultWorkingDirectory)/Drill-CLI-linux-x86_64-release'
  # Use the long path so we test if relative CWD works too in Drill
  - bash: chmod +x $(System.DefaultWorkingDirectory)/Drill-CLI-linux-x86_64-release/drill-search-cli
  - bash: $(System.DefaultWorkingDirectory)/Drill-CLI-linux-x86_64-release/drill-search-cli .

- job: OSX_CLI_Name_Test
  timeoutInMinutes: 1
  dependsOn: [OSX_CLI_Release]
  pool:
    name: Hosted macOS
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-CLI-osx-x86_64-release'
      targetPath: '$(Pipeline.Workspace)/Drill-CLI-osx-x86_64-release'
  - bash: chmod +x $(Pipeline.Workspace)/Drill-CLI-osx-x86_64-release/drill-search-cli
  - bash: $(Pipeline.Workspace)/Drill-CLI-osx-x86_64-release/drill-search-cli .

- job: Windows_CLI_Name_Test
  timeoutInMinutes: 1
  dependsOn: [Windows_CLI_Release]
  pool:
    name: Hosted VS2017
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-CLI-windows-x86_64-release'
      targetPath: '$(Pipeline.Workspace)/Drill-CLI-windows-x86_64-release'
  - script: $(Pipeline.Workspace)/Drill-CLI-windows-x86_64-release/drill-search-cli.exe .



# Seach files for content tests with cutoff time

- job: Linux_CLI_Content_Test
  timeoutInMinutes: 2
  dependsOn: [Linux_CLI_Release]
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-CLI-linux-x86_64-release'
      targetPath: '$(Pipeline.Workspace)/Drill-CLI-linux-x86_64-release'
  # Use the long path so we test if relative CWD works too in Drill
  - bash: chmod +x $(Pipeline.Workspace)/Drill-CLI-linux-x86_64-release/drill-search-cli
  - bash: $(Pipeline.Workspace)/Drill-CLI-linux-x86_64-release/drill-search-cli content:.

- job: OSX_CLI_Content_Test
  timeoutInMinutes: 2
  dependsOn: [OSX_CLI_Release]
  pool:
    name: Hosted macOS
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-CLI-osx-x86_64-release'
      targetPath: '$(Pipeline.Workspace)/Drill-CLI-osx-x86_64-release'
  - bash: chmod +x $(Pipeline.Workspace)/Drill-CLI-osx-x86_64-release/drill-search-cli
  - bash: $(Pipeline.Workspace)/Drill-CLI-osx-x86_64-release/drill-search-cli content:.

- job: Windows_CLI_Content_Test
  timeoutInMinutes: 2
  dependsOn: [Windows_CLI_Release]
  pool:
    name: Hosted VS2017
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'Drill-CLI-windows-x86_64-release'
      targetPath: '$(Pipeline.Workspace)/Drill-CLI-windows-x86_64-release'
  - script: $(Pipeline.Workspace)/Drill-CLI-windows-x86_64-release/drill-search-cli.exe content:.



##


- job: Publish_Alpha
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn:
  - Linux_GTK_Release_AppImage_Test
  - Linux_GTK_Release_AppImage
  - Linux_CLI_Unittest
  - Windows_CLI_Unittest
  - OSX_CLI_Unittest
  - Linux_GTK_Unittest
  - OSX_GTK_Unittest
  - Linux_CLI_Release_Zip
  - Windows_CLI_Release_Zip
  - OSX_CLI_Release_Zip
  - Linux_GTK_Release_Zip
  - Windows_GTK_Release_Zip
  - OSX_GTK_Release_Zip
  - Linux_CLI_Name_Test
  - OSX_CLI_Name_Test
  - Windows_CLI_Name_Test
  - Linux_CLI_Content_Test
  - OSX_CLI_Content_Test
  - Windows_CLI_Content_Test
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      targetPath: '$(Build.BinariesDirectory)'
  - task: GitHubRelease@0
    inputs:
      gitHubConnection: 'githubtoken'
      repositoryName: '$(Build.Repository.Name)'
      action: 'delete'
      tag: 'ContinuousIntegration'
  - task: GitHubRelease@0
    inputs:
      gitHubConnection: 'githubtoken'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'manual'
      tag: 'ContinuousIntegration'
      title: '$(Build.BuildNumber) Alpha'
      releaseNotesSource: 'input'
      releaseNotes: 'Automated Build $(Build.BuildNumber)'
      isPreRelease: true
      assetUploadMode: replace
      addChangeLog: false
      assets: |
        $(Build.BinariesDirectory)/Drill-release-x86_64.AppImage/Drill-release-x86_64.AppImage
        $(Build.BinariesDirectory)/Drill-CLI-linux-x86_64-release.zip/Drill-CLI-linux-x86_64-release.zip
        $(Build.BinariesDirectory)/Drill-CLI-windows-x86_64-release.zip/Drill-CLI-windows-x86_64-release.zip
        $(Build.BinariesDirectory)/Drill-CLI-osx-x86_64-release.zip/Drill-CLI-osx-x86_64-release.zip
        $(Build.BinariesDirectory)/Drill-GTK-linux-x86_64-release.zip/Drill-GTK-linux-x86_64-release.zip
        $(Build.BinariesDirectory)/Drill-GTK-windows-x86_64-release.zip/Drill-GTK-windows-x86_64-release.zip
        $(Build.BinariesDirectory)/Drill-GTK-osx-x86_64-release.zip/Drill-GTK-osx-x86_64-release.zip


- job: Publish_Beta
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn:
  - Linux_GTK_Release_AppImage_Test
  - Linux_GTK_Release_AppImage
  - Linux_CLI_Unittest
  - Windows_CLI_Unittest
  - OSX_CLI_Unittest
  - Linux_GTK_Unittest
  - OSX_GTK_Unittest
  - Linux_CLI_Release_Zip
  - Windows_CLI_Release_Zip
  - OSX_CLI_Release_Zip
  - Linux_GTK_Release_Zip
  - Windows_GTK_Release_Zip
  - OSX_GTK_Release_Zip
  - Linux_CLI_Name_Test
  - OSX_CLI_Name_Test
  - Windows_CLI_Name_Test
  - Linux_CLI_Content_Test
  - OSX_CLI_Content_Test
  - Windows_CLI_Content_Test
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      targetPath: '$(System.DefaultWorkingDirectory)'
  - bash: export DRILL_VERSION=$(python -c "import sys, json; f = open('dub.json'); print(json.load(f)['version']); f.close()") 
  - bash: echo \##vso[task.setvariable variable=DRILL_VERSION]$DRILL_VERSION
  - bash: |
      mv Drill-release-x86_64.AppImage/Drill-release-x86_64.AppImage                 "Drill-$DRILL_VERSION-x86_64.AppImage"
      mv Drill-CLI-linux-x86_64-release.zip/Drill-CLI-linux-x86_64-release.zip       "Drill-CLI-linux-x86_64-release-$DRILL_VERSION.zip"
      mv Drill-CLI-windows-x86_64-release.zip/Drill-CLI-windows-x86_64-release.zip   "Drill-CLI-windows-x86_64-release-$DRILL_VERSION.zip"
      mv Drill-CLI-osx-x86_64-release.zip/Drill-CLI-osx-x86_64-release.zip           "Drill-CLI-osx-x86_64-release-$DRILL_VERSION.zip"
      mv Drill-GTK-linux-x86_64-release.zip/Drill-GTK-linux-x86_64-release.zip       "Drill-GTK-linux-x86_64-release-$DRILL_VERSION.zip"
      mv Drill-GTK-windows-x86_64-release.zip/Drill-GTK-windows-x86_64-release.zip   "Drill-GTK-windows-x86_64-release-$DRILL_VERSION.zip"
      mv Drill-GTK-osx-x86_64-release.zip/Drill-GTK-osx-x86_64-release.zip           "Drill-GTK-osx-x86_64-release-$DRILL_VERSION.zip"
  - task: GitHubRelease@0
    inputs:
      gitHubConnection: 'githubtoken'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'manual'
      tag: $(DRILL_VERSION)
      title: '$(DRILL_VERSION) Beta'
      releaseNotesSource: 'input'
      releaseNotes: 'Automated Build $(DRILL_VERSION)'
      isPreRelease: true
      assetUploadMode: replace
      addChangeLog: false
      assets: |
        Drill-$(DRILL_VERSION)-x86_64.AppImage          
        Drill-CLI-linux-x86_64-release-$(DRILL_VERSION).zip
        Drill-CLI-windows-x86_64-release-$(DRILL_VERSION).zip  
        Drill-CLI-osx-x86_64-release-$(DRILL_VERSION).zip
        Drill-GTK-linux-x86_64-release-$(DRILL_VERSION).zip
        Drill-GTK-windows-x86_64-release-$(DRILL_VERSION).zip  
        Drill-GTK-osx-x86_64-release-$(DRILL_VERSION).zip
# - stage: BuildCLIDebug
#   displayName: Build CLI Debug
#   dependsOn: UnittestCLI
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - bash: |
#         wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
#         sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
#         dmd --version
#         dub --version
#       displayName: 'Install DMD'
#     - bash: 'dub build -c CLI -b debug --arch=x86_64'
#       displayName: 'Build CLI Debug x86_64'
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Build/Drill-CLI-linux-x86_64-debug'
#         artifact: 'Drill-CLI-linux-x86_64-debug'



# - stage: ZipCLIDebug
#   displayName: Debug CLI .zip
#   dependsOn: BuildCLIDebug
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-CLI-linux-x86_64-debug'
#         targetPath: '$(Pipeline.Workspace)'
#     - bash: 7z a -tzip Drill-CLI-linux-x86_64-debug.zip $(Pipeline.Workspace)/Drill-CLI-linux-x86_64-debug/*
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Drill-CLI-linux-x86_64-debug.zip'
#         artifact: 'Drill-CLI-linux-x86_64-debug.zip'

  


# - stage: BuildGTKRelease
#   displayName: Build GTK Release
#   dependsOn: UnittestGTK
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - bash: |
#         wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
#         sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
#         dmd --version
#         dub --version
#       displayName: 'Install DMD'
#     - bash: 'sudo apt install -y libgtk-3-dev'
#     - bash: 'dub build -c GTK -b release --arch=x86_64'
#       displayName: 'Build GTK Release x86_64'
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Build/Drill-GTK-linux-x86_64-release'
#         artifact: 'Drill-GTK-linux-x86_64-release'





# - stage: CreateCLIDeb
#   displayName: Create CLI .deb
#   dependsOn: BuildCLIRelease
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - checkout: none
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-CLI-linux-x86_64-release'
#         targetPath: '$(Pipeline.Workspace)'







# - stage: BuildGTKDebug
#   displayName: Build GTK Debug
#   dependsOn: []
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - bash: |
#         wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
#         sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
#         dmd --version
#         dub --version
#       displayName: 'Install DMD'
#     - bash: 'sudo apt install -y libgtk-3-dev'
#     - bash: 'dub build -c GTK -b debug --arch=x86_64'
#       displayName: 'Build GTK Debug x86_64'
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Build/Drill-GTK-linux-x86_64-debug'
#         artifact: 'Drill-GTK-linux-x86_64-debug'


# - stage: ZipGTKDebug
#   displayName: Debug GTK .zip
#   dependsOn: BuildGTKDebug
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-GTK-linux-x86_64-debug'
#         targetPath: '$(Pipeline.Workspace)'
#     - bash: 7z a -tzip Drill-GTK-linux-x86_64-debug.zip $(Pipeline.Workspace)/Drill-GTK-linux-x86_64-debug/*
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Drill-GTK-linux-x86_64-debug.zip'
#         artifact: 'Drill-GTK-linux-x86_64-debug.zip'






# - stage: ZipGTKRelease
#   displayName: Release GTK .zip
#   dependsOn: BuildGTKRelease
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - checkout: none
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         targetPath: '$(Pipeline.Workspace)'
#     - bash: 7z a -tzip Drill-GTK-linux-x86_64-release.zip $(Pipeline.Workspace)/Drill-GTK-linux-x86_64-release/*
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Drill-GTK-linux-x86_64-release.zip'
#         artifact: 'Drill-GTK-linux-x86_64-release.zip'


# - stage: CreateGTKDeb
#   displayName: Create GTK .deb
#   dependsOn: BuildGTKRelease
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - checkout: none
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-GTK-linux-x86_64-release'
#         targetPath: '$(Pipeline.Workspace)'     


# - stage: CreateAppimage
#   displayName: Create AppImage
#   dependsOn: BuildGTKRelease
#   jobs:
#   - job: linux_cli_release_x86_64_dmd_stable
#     displayName: Linux CLI Release x86_64 DMD stable
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - checkout: none
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-CLI-linux-x86_64-release'
#         targetPath: '$(Pipeline.Workspace)'























# - stage: Publish
#   dependsOn: 
#     - UnittestCLI
#     - UnittestGTK
#     - CreateAppimage
#     - CreateGTKDeb
#     - CreateCLIDeb
#     # - ZipCLIDebug
#     - ZipCLIRelease
#     # - ZipGTKDebug
#     - ZipGTKRelease

































    # - task: ZipDirectory@1
    #   inputs:
    #     ItemSpec: 'Build/Drill-CLI-linux-x86_64-release'


        

  # - job: linux_package_cli_release_x86_64_dmd_stable
  #   dependsOn: linux_cli_release_x86_64_dmd_stable
  #   steps:
  #   -


  # - job: linux_package_cli_debug_x86_64_dmd_stable
  #   dependsOn: linux_cli_debug_x86_64_dmd_stable
  #   steps:
  #   - task: DownloadPipelineArtifact@2
  #     inputs:
  #       buildType: 'specific'
  #       project: '609befef-9c2f-4601-a879-747a87fb063c'
  #       definition: '6'
  #       buildVersionToDownload: 'latest'
  #       itemPattern: 'x86_64 Linux DMD Debug CLI'
  #       targetPath: '$(Pipeline.Workspace)'
  #   - task: ZipDirectory@1
  #     inputs:
  #       ItemSpec: 'x86_64 Linux DMD Debug CLI'




      

# - stage: install_d
#   jobs:
#   - job: Windows
#     pool:
#       vmImage: 'vs2017-win2016'
#     steps:
#     - script: echo hello from Windows
#   - job: OSX
#     pool:
#       vmImage: 'macOS-10.13'
#     steps:
#     - bash: wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).osx.tar.xz
#     - bash: 7z -aoa x dmd.$(dmd_version).osx.tar.xz
#     - bash: 7z -aoa x dmd.$(dmd_version).osx.tar
#     - bash: chmod +x dmd2/osx/bin/dub
#     - bash: dmd2/osx/bin/dub --version
#     - bash: chmod +x dmd2/osx/bin/dmd
#     - bash: dmd2/osx/bin/dmd --version
    
#   - job: Linux
#     pool:
#       vmImage: 'ubuntu-16.04'
#     steps:
#     - bash: wget -c http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).linux.tar.xz
#     - bash: 7z x -aos dmd.$(dmd_version).linux.tar.xz
#     - bash: 7z x -aos dmd.$(dmd_version).linux.tar
#     - bash: chmod +x dmd2/linux/bin64/dub
#     - bash: dmd2/linux/bin64/dub --version
#     - bash: chmod +x dmd2/linux/bin64/dmd
#     - bash: dmd2/linux/bin64/dmd --version



stages:


- stage: Build
  displayName: Build
  dependsOn: []

  jobs:
  - job: Linux_CLI_Unittest
    dependsOn: []
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - bash: |
        wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
        sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
        dmd --version
        dub --version
      displayName: 'Install DMD'
    - bash: 'dub build -c CLI -b unittest --arch=x86_64'
      displayName: "CLI Unittest"

  - job: Linux_CLI_Release
    dependsOn: []
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - bash: |
        wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
        sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
        dmd --version
        dub --version
      displayName: 'Install DMD'
    - bash: 'dub build -c CLI -b release --arch=x86_64'
      displayName: "CLI Release"
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'Build/Drill-CLI-linux-x86_64-release'
        artifact: 'Drill-CLI-linux-x86_64-release' 

  - job: Windows_CLI_Unittest
    dependsOn: []
    pool:
      name: Hosted VS2017
    steps:
    - powershell: |
        Invoke-WebRequest -Uri http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).windows.zip -OutFile dmd2.zip
        Expand-Archive dmd2.zip -DestinationPath .
    - script: '%cd%/dmd2/windows/bin/dmd.exe --version'
    - script: '%cd%/dmd2/windows/bin/dub.exe --version'
    - script: '%cd%/dmd2/windows/bin/dub.exe build -c CLI -b unittest --arch=x86_64'

  - job: Windows_CLI_Release
    dependsOn: []
    pool:
      name: Hosted VS2017
    steps:
    - powershell: |
        Invoke-WebRequest -Uri http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).windows.zip -OutFile dmd2.zip
        Expand-Archive dmd2.zip -DestinationPath .
    - script: '%cd%/dmd2/windows/bin/dmd.exe --version'
    - script: '%cd%/dmd2/windows/bin/dub.exe --version'
    - script: '%cd%/dmd2/windows/bin/dub.exe build -c CLI -b release --arch=x86_64'

  - job: Linux_GTK_Unittest
    dependsOn: []
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - bash: |
        wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
        sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
        dmd --version
        dub --version
      displayName: 'Install DMD'
    - bash: 'sudo apt install -y libgtk-3-dev'
    - bash: 'dub build -c GTK -b unittest --arch=x86_64'
      displayName: 'Unittest GTK'



  - job: Linux_CLI_Release_Zip
    dependsOn: [Linux_CLI_Release]
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'
    - bash: 7z a -tzip Drill-CLI-linux-x86_64-release.zip $(Pipeline.Workspace)/Drill-CLI-linux-x86_64-release/*
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'Drill-CLI-linux-x86_64-release.zip'
        artifact: 'Drill-CLI-linux-x86_64-release.zip'


  - job: Linux_CLI_Release_Test
    dependsOn: [Linux_CLI_Release]
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '.'
    # Azure creates a directory for every artifact
    # Use the long path so we test if relative CWD works too in Drill
    - bash: chmod +x ./Drill-CLI-linux-x86_64-release/Drill-CLI-linux-x86_64-release/drill-search-cli
    - bash: ./Drill-CLI-linux-x86_64-release/Drill-CLI-linux-x86_64-release/drill-search-cli .

  - job: Publish_Beta
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: 
      - Linux_CLI_Release_Test
      - Linux_CLI_Release_Zip
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Build.ArtifactStagingDirectory)'
        itemPattern: '*.zip'
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'githubtoken'
        repositoryName: '$(Build.Repository.Name)'
        action: 'delete'
        tag: 'ContinuousIntegration'
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'githubtoken'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'manual'
        tag: 'ContinuousIntegration'
        title: 'Beta'
        releaseNotesSource: 'input'
        releaseNotes: 'Automated Build $(Build.BuildNumber)'
        isPreRelease: true
        assetUploadMode: replace
        addChangeLog: false
        assets: |
          $(Build.ArtifactStagingDirectory)/*.zip



# - stage: BuildCLIDebug
#   displayName: Build CLI Debug
#   dependsOn: UnittestCLI
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - bash: |
#         wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
#         sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
#         dmd --version
#         dub --version
#       displayName: 'Install DMD'
#     - bash: 'dub build -c CLI -b debug --arch=x86_64'
#       displayName: 'Build CLI Debug x86_64'
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Build/Drill-CLI-linux-x86_64-debug'
#         artifact: 'Drill-CLI-linux-x86_64-debug'



# - stage: ZipCLIDebug
#   displayName: Debug CLI .zip
#   dependsOn: BuildCLIDebug
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-CLI-linux-x86_64-debug'
#         targetPath: '$(Pipeline.Workspace)'
#     - bash: 7z a -tzip Drill-CLI-linux-x86_64-debug.zip $(Pipeline.Workspace)/Drill-CLI-linux-x86_64-debug/*
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Drill-CLI-linux-x86_64-debug.zip'
#         artifact: 'Drill-CLI-linux-x86_64-debug.zip'

  


# - stage: BuildGTKRelease
#   displayName: Build GTK Release
#   dependsOn: UnittestGTK
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - bash: |
#         wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
#         sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
#         dmd --version
#         dub --version
#       displayName: 'Install DMD'
#     - bash: 'sudo apt install -y libgtk-3-dev'
#     - bash: 'dub build -c GTK -b release --arch=x86_64'
#       displayName: 'Build GTK Release x86_64'
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Build/Drill-GTK-linux-x86_64-release'
#         artifact: 'Drill-GTK-linux-x86_64-release'





# - stage: CreateCLIDeb
#   displayName: Create CLI .deb
#   dependsOn: BuildCLIRelease
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - checkout: none
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-CLI-linux-x86_64-release'
#         targetPath: '$(Pipeline.Workspace)'







# - stage: BuildGTKDebug
#   displayName: Build GTK Debug
#   dependsOn: []
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - bash: |
#         wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
#         sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
#         dmd --version
#         dub --version
#       displayName: 'Install DMD'
#     - bash: 'sudo apt install -y libgtk-3-dev'
#     - bash: 'dub build -c GTK -b debug --arch=x86_64'
#       displayName: 'Build GTK Debug x86_64'
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Build/Drill-GTK-linux-x86_64-debug'
#         artifact: 'Drill-GTK-linux-x86_64-debug'


# - stage: ZipGTKDebug
#   displayName: Debug GTK .zip
#   dependsOn: BuildGTKDebug
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-GTK-linux-x86_64-debug'
#         targetPath: '$(Pipeline.Workspace)'
#     - bash: 7z a -tzip Drill-GTK-linux-x86_64-debug.zip $(Pipeline.Workspace)/Drill-GTK-linux-x86_64-debug/*
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Drill-GTK-linux-x86_64-debug.zip'
#         artifact: 'Drill-GTK-linux-x86_64-debug.zip'






# - stage: ZipGTKRelease
#   displayName: Release GTK .zip
#   dependsOn: BuildGTKRelease
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - checkout: none
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         targetPath: '$(Pipeline.Workspace)'
#     - bash: 7z a -tzip Drill-GTK-linux-x86_64-release.zip $(Pipeline.Workspace)/Drill-GTK-linux-x86_64-release/*
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Drill-GTK-linux-x86_64-release.zip'
#         artifact: 'Drill-GTK-linux-x86_64-release.zip'


# - stage: CreateGTKDeb
#   displayName: Create GTK .deb
#   dependsOn: BuildGTKRelease
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - checkout: none
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-GTK-linux-x86_64-release'
#         targetPath: '$(Pipeline.Workspace)'     


# - stage: CreateAppimage
#   displayName: Create AppImage
#   dependsOn: BuildGTKRelease
#   jobs:
#   - job: linux_cli_release_x86_64_dmd_stable
#     displayName: Linux CLI Release x86_64 DMD stable
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - checkout: none
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-CLI-linux-x86_64-release'
#         targetPath: '$(Pipeline.Workspace)'























# - stage: Publish
#   dependsOn: 
#     - UnittestCLI
#     - UnittestGTK
#     - CreateAppimage
#     - CreateGTKDeb
#     - CreateCLIDeb
#     # - ZipCLIDebug
#     - ZipCLIRelease
#     # - ZipGTKDebug
#     - ZipGTKRelease

































    # - task: ZipDirectory@1
    #   inputs:
    #     ItemSpec: 'Build/Drill-CLI-linux-x86_64-release'


        

  # - job: linux_package_cli_release_x86_64_dmd_stable
  #   dependsOn: linux_cli_release_x86_64_dmd_stable
  #   steps:
  #   -


  # - job: linux_package_cli_debug_x86_64_dmd_stable
  #   dependsOn: linux_cli_debug_x86_64_dmd_stable
  #   steps:
  #   - task: DownloadPipelineArtifact@2
  #     inputs:
  #       buildType: 'specific'
  #       project: '609befef-9c2f-4601-a879-747a87fb063c'
  #       definition: '6'
  #       buildVersionToDownload: 'latest'
  #       itemPattern: 'x86_64 Linux DMD Debug CLI'
  #       targetPath: '$(Pipeline.Workspace)'
  #   - task: ZipDirectory@1
  #     inputs:
  #       ItemSpec: 'x86_64 Linux DMD Debug CLI'




      

# - stage: install_d
#   jobs:
#   - job: Windows
#     pool:
#       vmImage: 'vs2017-win2016'
#     steps:
#     - script: echo hello from Windows
#   - job: OSX
#     pool:
#       vmImage: 'macOS-10.13'
#     steps:
#     - bash: wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).osx.tar.xz
#     - bash: 7z -aoa x dmd.$(dmd_version).osx.tar.xz
#     - bash: 7z -aoa x dmd.$(dmd_version).osx.tar
#     - bash: chmod +x dmd2/osx/bin/dub
#     - bash: dmd2/osx/bin/dub --version
#     - bash: chmod +x dmd2/osx/bin/dmd
#     - bash: dmd2/osx/bin/dmd --version
    
#   - job: Linux
#     pool:
#       vmImage: 'ubuntu-16.04'
#     steps:
#     - bash: wget -c http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).linux.tar.xz
#     - bash: 7z x -aos dmd.$(dmd_version).linux.tar.xz
#     - bash: 7z x -aos dmd.$(dmd_version).linux.tar
#     - bash: chmod +x dmd2/linux/bin64/dub
#     - bash: dmd2/linux/bin64/dub --version
#     - bash: chmod +x dmd2/linux/bin64/dmd
#     - bash: dmd2/linux/bin64/dmd --version

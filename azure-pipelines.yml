

stages:


- stage: UnittestCLI
  displayName: Unittest CLI
  dependsOn: []
  jobs:
  - job: Linux
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - bash: |
        wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
        sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
        dmd --version
        dub --version
      displayName: 'Install DMD'
    - bash: 'dub build -c CLI -b unittest --arch=x86_64'








  - job: Windows
    pool:
      name: Hosted VS2017
    steps:
    - powershell: |
        Invoke-WebRequest -Uri http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).windows.zip -OutFile dmd2.zip
        Expand-Archive dmd2.zip -DestinationPath .
    - script: '%cd%/dmd2/windows/bin/dmd.exe --version'
    - script: '%cd%/dmd2/windows/bin/dub.exe --version'
    - script: '%cd%/dmd2/windows/bin/dub.exe build -c CLI -b unittest --arch=x86_64'


- stage: UnittestGTK
  displayName: Unittest GTK
  dependsOn: []
  jobs:
  - job:
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - bash: |
        wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
        sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
        dmd --version
        dub --version
      displayName: 'Install DMD'
    - bash: 'sudo apt install -y libgtk-3-dev'
    - bash: 'dub build -c GTK -b unittest --arch=x86_64'
      displayName: 'Unittest GTK'

# - stage: BuildCLIDebug
#   displayName: Build CLI Debug
#   dependsOn: UnittestCLI
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - bash: |
#         wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
#         sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
#         dmd --version
#         dub --version
#       displayName: 'Install DMD'
#     - bash: 'dub build -c CLI -b debug --arch=x86_64'
#       displayName: 'Build CLI Debug x86_64'
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Build/Drill-CLI-linux-x86_64-debug'
#         artifact: 'Drill-CLI-linux-x86_64-debug'



# - stage: ZipCLIDebug
#   displayName: Debug CLI .zip
#   dependsOn: BuildCLIDebug
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-CLI-linux-x86_64-debug'
#         targetPath: '$(Pipeline.Workspace)'
#     - bash: 7z a -tzip Drill-CLI-linux-x86_64-debug.zip $(Pipeline.Workspace)/Drill-CLI-linux-x86_64-debug/*
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Drill-CLI-linux-x86_64-debug.zip'
#         artifact: 'Drill-CLI-linux-x86_64-debug.zip'


- stage: BuildCLIRelease
  displayName: Build CLI Release
  dependsOn: UnittestCLI
  jobs:
  - job: linux_cli_release_x86_64_dmd_stable
    displayName: Linux CLI Release x86_64 DMD stable
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - bash: |
        wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
        sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
        dmd --version
        dub --version
      displayName: 'Install D Linux'
    - bash: |
        dub build -c CLI -b release --arch=x86_64
      displayName: 'dub build -c CLI -b release'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'Build/Drill-CLI-linux-x86_64-release'
        artifact: 'Drill-CLI-linux-x86_64-release' 


- stage: BuildGTKRelease
  displayName: Build GTK Release
  dependsOn: UnittestGTK
  jobs:
  - job:
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - bash: |
        wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
        sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
        dmd --version
        dub --version
      displayName: 'Install DMD'
    - bash: 'sudo apt install -y libgtk-3-dev'
    - bash: 'dub build -c GTK -b release --arch=x86_64'
      displayName: 'Build GTK Release x86_64'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'Build/Drill-GTK-linux-x86_64-release'
        artifact: 'Drill-GTK-linux-x86_64-release'



- stage: ZipCLIRelease
  displayName: Release CLI .zip
  dependsOn: BuildCLIRelease
  jobs:
  - job: Linux
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'
    - bash: 7z a -tzip Drill-CLI-linux-x86_64-release.zip $(Pipeline.Workspace)/Drill-CLI-linux-x86_64-release/*
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'Drill-CLI-linux-x86_64-release.zip'
        artifact: 'Drill-CLI-linux-x86_64-release.zip'


- stage: CreateCLIDeb
  displayName: Create CLI .deb
  dependsOn: BuildCLIRelease
  jobs:
  - job:
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        itemPattern: 'Drill-CLI-linux-x86_64-release'
        targetPath: '$(Pipeline.Workspace)'







# - stage: BuildGTKDebug
#   displayName: Build GTK Debug
#   dependsOn: []
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - bash: |
#         wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd_$(dmd_version)-0_amd64.deb
#         sudo dpkg -i dmd_$(dmd_version)-0_amd64.deb
#         dmd --version
#         dub --version
#       displayName: 'Install DMD'
#     - bash: 'sudo apt install -y libgtk-3-dev'
#     - bash: 'dub build -c GTK -b debug --arch=x86_64'
#       displayName: 'Build GTK Debug x86_64'
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Build/Drill-GTK-linux-x86_64-debug'
#         artifact: 'Drill-GTK-linux-x86_64-debug'


# - stage: ZipGTKDebug
#   displayName: Debug GTK .zip
#   dependsOn: BuildGTKDebug
#   jobs:
#   - job:
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         itemPattern: 'Drill-GTK-linux-x86_64-debug'
#         targetPath: '$(Pipeline.Workspace)'
#     - bash: 7z a -tzip Drill-GTK-linux-x86_64-debug.zip $(Pipeline.Workspace)/Drill-GTK-linux-x86_64-debug/*
#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: 'Drill-GTK-linux-x86_64-debug.zip'
#         artifact: 'Drill-GTK-linux-x86_64-debug.zip'






- stage: ZipGTKRelease
  displayName: Release GTK .zip
  dependsOn: BuildGTKRelease
  jobs:
  - job:
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'
    - bash: 7z a -tzip Drill-GTK-linux-x86_64-release.zip $(Pipeline.Workspace)/Drill-GTK-linux-x86_64-release/*
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'Drill-GTK-linux-x86_64-release.zip'
        artifact: 'Drill-GTK-linux-x86_64-release.zip'


- stage: CreateGTKDeb
  displayName: Create GTK .deb
  dependsOn: BuildGTKRelease
  jobs:
  - job:
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        itemPattern: 'Drill-GTK-linux-x86_64-release'
        targetPath: '$(Pipeline.Workspace)'     


- stage: CreateAppimage
  displayName: Create AppImage
  dependsOn: BuildGTKRelease
  jobs:
  - job: linux_cli_release_x86_64_dmd_stable
    displayName: Linux CLI Release x86_64 DMD stable
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        itemPattern: 'Drill-CLI-linux-x86_64-release'
        targetPath: '$(Pipeline.Workspace)'























- stage: Publish
  dependsOn: 
    - UnittestCLI
    - UnittestGTK
    - CreateAppimage
    - CreateGTKDeb
    - CreateCLIDeb
    # - ZipCLIDebug
    - ZipCLIRelease
    # - ZipGTKDebug
    - ZipGTKRelease












  jobs:
  - job:
    displayName: Publish
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - checkout: none
    - bash: 'ls $(Build.ArtifactStagingDirectory)'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - bash: 'ls $(Build.ArtifactStagingDirectory)'
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'githubtoken'
        repositoryName: '$(Build.Repository.Name)'
        action: 'edit'
        target: '$(Build.SourceVersion)'
        tagSource: 'manual'
        tag: 'ContinuousIntegration'
        title: 'ContinuousIntegration'
        releaseNotesSource: 'input'
        releaseNotes: '$(Build.BuildNumber) $(Build.BuildUri)'
        assets: '$(Build.ArtifactStagingDirectory)/*.*'
        isPreRelease: true


    # - task: ZipDirectory@1
    #   inputs:
    #     ItemSpec: 'Build/Drill-CLI-linux-x86_64-release'


        

  # - job: linux_package_cli_release_x86_64_dmd_stable
  #   dependsOn: linux_cli_release_x86_64_dmd_stable
  #   steps:
  #   -


  # - job: linux_package_cli_debug_x86_64_dmd_stable
  #   dependsOn: linux_cli_debug_x86_64_dmd_stable
  #   steps:
  #   - task: DownloadPipelineArtifact@2
  #     inputs:
  #       buildType: 'specific'
  #       project: '609befef-9c2f-4601-a879-747a87fb063c'
  #       definition: '6'
  #       buildVersionToDownload: 'latest'
  #       itemPattern: 'x86_64 Linux DMD Debug CLI'
  #       targetPath: '$(Pipeline.Workspace)'
  #   - task: ZipDirectory@1
  #     inputs:
  #       ItemSpec: 'x86_64 Linux DMD Debug CLI'




      

# - stage: install_d
#   jobs:
#   - job: Windows
#     pool:
#       vmImage: 'vs2017-win2016'
#     steps:
#     - script: echo hello from Windows
#   - job: OSX
#     pool:
#       vmImage: 'macOS-10.13'
#     steps:
#     - bash: wget http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).osx.tar.xz
#     - bash: 7z -aoa x dmd.$(dmd_version).osx.tar.xz
#     - bash: 7z -aoa x dmd.$(dmd_version).osx.tar
#     - bash: chmod +x dmd2/osx/bin/dub
#     - bash: dmd2/osx/bin/dub --version
#     - bash: chmod +x dmd2/osx/bin/dmd
#     - bash: dmd2/osx/bin/dmd --version
    
#   - job: Linux
#     pool:
#       vmImage: 'ubuntu-16.04'
#     steps:
#     - bash: wget -c http://downloads.dlang.org/releases/2.x/$(dmd_version)/dmd.$(dmd_version).linux.tar.xz
#     - bash: 7z x -aos dmd.$(dmd_version).linux.tar.xz
#     - bash: 7z x -aos dmd.$(dmd_version).linux.tar
#     - bash: chmod +x dmd2/linux/bin64/dub
#     - bash: dmd2/linux/bin64/dub --version
#     - bash: chmod +x dmd2/linux/bin64/dmd
#     - bash: dmd2/linux/bin64/dmd --version
